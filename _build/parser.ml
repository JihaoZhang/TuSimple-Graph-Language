type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LEFTSQUAREBRACKET
  | RIGHTSQUAREBRACKET
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | ADDASSIGN
  | MINUSASSIGN
  | MOD
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | SINGLELINK
  | DOUBLELINK
  | ADDADD
  | AT
  | NULL
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | NODE
  | FLOAT
  | STRING
  | LIST
  | SET
  | MAP
  | GRAPH
  | ID of (string)
  | LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 60 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LEFTSQUAREBRACKET *);
  264 (* RIGHTSQUAREBRACKET *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* ADDASSIGN *);
  272 (* MINUSASSIGN *);
  273 (* MOD *);
  274 (* EQ *);
  275 (* NEQ *);
  276 (* LT *);
  277 (* LEQ *);
  278 (* GT *);
  279 (* GEQ *);
  280 (* TRUE *);
  281 (* FALSE *);
  282 (* AND *);
  283 (* OR *);
  284 (* SINGLELINK *);
  285 (* DOUBLELINK *);
  286 (* ADDADD *);
  287 (* AT *);
  288 (* NULL *);
  289 (* RETURN *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* WHILE *);
  294 (* INT *);
  295 (* BOOL *);
  296 (* VOID *);
  297 (* NODE *);
  298 (* FLOAT *);
  299 (* STRING *);
  300 (* LIST *);
  301 (* SET *);
  302 (* MAP *);
  303 (* GRAPH *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  304 (* ID *);
  305 (* LITERAL *);
  306 (* FLOAT_LITERAL *);
  307 (* STRING_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\007\000\007\000\003\000\008\000\008\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\012\000\012\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\013\000\015\000\016\000\
\016\000\017\000\017\000\014\000\014\000\018\000\018\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\005\000\005\000\007\000\000\000\002\000\003\000\000\000\002\000\
\002\000\002\000\003\000\003\000\005\000\007\000\009\000\005\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\005\000\005\000\004\000\
\003\000\005\000\005\000\001\000\001\000\004\000\003\000\001\000\
\002\000\001\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\080\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000\000\000\000\000\016\000\001\000\003\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\018\000\000\000\008\000\000\000\000\000\000\000\
\020\000\000\000\019\000\000\000\009\000\021\000\000\000\000\000\
\000\000\000\000\023\000\005\000\000\000\000\000\038\000\039\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\035\000\
\036\000\037\000\024\000\000\000\000\000\068\000\000\000\000\000\
\056\000\057\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\028\000\072\000\000\000\071\000\000\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\064\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\066\000\000\000\067\000\
\000\000\000\000\030\000\000\000\000\000\031\000"

let yydgoto = "\002\000\
\003\000\004\000\016\000\017\000\018\000\032\000\044\000\048\000\
\033\000\067\000\068\000\113\000\069\000\116\000\070\000\108\000\
\109\000\117\000"

let yysindex = "\019\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\255\027\255\029\255\000\000\000\000\000\000\
\000\000\024\255\077\255\082\255\090\255\010\255\237\001\237\001\
\237\001\000\000\237\001\092\255\106\255\108\255\067\255\117\255\
\118\255\000\000\000\000\237\001\000\000\134\255\237\001\121\255\
\000\000\091\255\000\000\237\001\000\000\000\000\095\255\085\255\
\145\255\075\000\000\000\000\000\075\000\075\000\000\000\000\000\
\146\255\000\000\053\255\151\255\152\255\153\255\008\255\000\000\
\000\000\000\000\000\000\214\000\143\255\000\000\133\001\127\255\
\000\000\000\000\005\000\000\000\237\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\227\254\247\254\000\000\
\000\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\000\000\
\000\000\000\000\214\001\000\000\021\255\000\000\154\001\214\001\
\156\255\175\001\214\001\159\255\161\255\195\001\214\001\214\001\
\214\001\167\255\172\255\173\255\174\255\252\254\252\254\000\000\
\000\000\000\000\187\255\187\255\096\255\096\255\096\255\096\255\
\251\001\233\001\214\001\000\000\075\000\047\000\075\000\047\000\
\000\000\075\000\000\000\075\000\157\255\075\000\157\255\214\001\
\130\255\004\001\000\000\214\001\214\001\000\000\214\001\000\000\
\047\000\075\000\000\000\179\255\047\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\255\000\000\000\000\000\000\000\000\000\000\
\189\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\169\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\110\000\000\000\
\000\000\000\000\000\000\000\000\137\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\194\255\000\000\
\208\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\255\000\000\000\000\000\000\000\000\015\255\
\000\000\000\000\011\255\000\000\209\255\000\000\221\255\057\000\
\085\000\000\000\000\000\000\000\000\000\164\000\191\000\000\000\
\000\000\000\000\056\255\250\255\031\001\058\001\085\001\112\001\
\122\255\139\255\037\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\255\
\211\255\000\000\000\000\070\255\064\001\000\000\091\001\000\000\
\000\000\220\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\146\000\000\000\145\000\000\000\000\000\163\000\
\000\000\183\255\206\255\066\000\000\000\000\000\175\255\000\000\
\000\000\000\000"

let yytablesize = 796
let yytable = "\071\000\
\015\000\057\000\073\000\074\000\123\000\125\000\092\000\093\000\
\077\000\081\000\026\000\027\000\094\000\078\000\082\000\034\000\
\078\000\034\000\122\000\001\000\083\000\057\000\084\000\085\000\
\107\000\140\000\141\000\111\000\112\000\114\000\115\000\118\000\
\119\000\120\000\121\000\086\000\087\000\088\000\124\000\126\000\
\127\000\128\000\129\000\130\000\131\000\132\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\076\000\050\000\019\000\
\046\000\020\000\046\000\021\000\046\000\046\000\053\000\046\000\
\074\000\074\000\054\000\158\000\153\000\160\000\155\000\022\000\
\079\000\046\000\046\000\079\000\055\000\056\000\075\000\075\000\
\023\000\046\000\046\000\057\000\058\000\024\000\050\000\163\000\
\051\000\052\000\152\000\166\000\154\000\025\000\053\000\156\000\
\034\000\157\000\054\000\159\000\063\000\064\000\065\000\066\000\
\090\000\091\000\092\000\093\000\055\000\056\000\035\000\112\000\
\094\000\036\000\037\000\057\000\058\000\059\000\060\000\038\000\
\061\000\062\000\052\000\039\000\052\000\043\000\052\000\052\000\
\050\000\052\000\051\000\105\000\063\000\064\000\065\000\066\000\
\053\000\041\000\045\000\053\000\054\000\053\000\049\000\053\000\
\053\000\026\000\053\000\052\000\052\000\075\000\055\000\056\000\
\078\000\079\000\080\000\103\000\143\000\057\000\058\000\059\000\
\060\000\145\000\061\000\062\000\161\000\053\000\146\000\028\000\
\029\000\030\000\023\000\031\000\023\000\023\000\063\000\064\000\
\065\000\066\000\023\000\148\000\040\000\165\000\023\000\042\000\
\149\000\150\000\151\000\057\000\047\000\046\000\006\000\007\000\
\023\000\023\000\033\000\090\000\091\000\092\000\093\000\023\000\
\023\000\023\000\023\000\094\000\023\000\023\000\097\000\098\000\
\099\000\100\000\076\000\077\000\029\000\072\000\029\000\029\000\
\023\000\023\000\023\000\023\000\029\000\060\000\033\000\060\000\
\029\000\060\000\060\000\164\000\060\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\000\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\000\000\029\000\029\000\
\000\000\000\000\047\000\000\000\047\000\000\000\047\000\047\000\
\000\000\047\000\029\000\029\000\029\000\029\000\050\000\000\000\
\000\000\106\000\000\000\047\000\047\000\000\000\053\000\000\000\
\000\000\000\000\054\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\000\000\000\000\
\000\000\000\000\000\000\057\000\058\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\014\000\
\050\000\000\000\051\000\000\000\063\000\064\000\065\000\066\000\
\053\000\058\000\000\000\058\000\054\000\058\000\058\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\000\000\000\000\000\000\000\000\050\000\057\000\058\000\059\000\
\060\000\000\000\061\000\062\000\053\000\059\000\000\000\059\000\
\054\000\059\000\059\000\000\000\059\000\000\000\063\000\064\000\
\065\000\066\000\055\000\056\000\000\000\000\000\000\000\000\000\
\000\000\057\000\058\000\000\000\000\000\000\000\041\000\000\000\
\041\000\000\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\063\000\064\000\065\000\066\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\
\041\000\069\000\000\000\069\000\000\000\069\000\069\000\000\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\000\000\069\000\069\000\042\000\000\000\042\000\000\000\
\042\000\042\000\000\000\042\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\042\000\043\000\
\000\000\043\000\000\000\043\000\043\000\000\000\043\000\043\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\089\000\000\000\
\043\000\043\000\000\000\000\000\000\000\000\000\090\000\091\000\
\092\000\093\000\000\000\000\000\000\000\000\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\110\000\000\000\101\000\
\102\000\000\000\000\000\000\000\000\000\090\000\091\000\092\000\
\093\000\000\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\162\000\000\000\101\000\102\000\
\000\000\000\000\000\000\000\000\090\000\091\000\092\000\093\000\
\000\000\000\000\000\000\000\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\000\000\000\000\101\000\102\000\048\000\
\000\000\048\000\000\000\048\000\048\000\061\000\048\000\061\000\
\000\000\061\000\061\000\000\000\061\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\049\000\000\000\049\000\000\000\049\000\049\000\
\062\000\049\000\062\000\000\000\062\000\062\000\000\000\062\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\049\000\049\000\050\000\000\000\050\000\
\000\000\050\000\050\000\063\000\050\000\063\000\000\000\063\000\
\063\000\000\000\063\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\000\000\050\000\050\000\
\051\000\000\000\051\000\000\000\051\000\051\000\000\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\051\000\051\000\051\000\051\000\051\000\104\000\
\000\000\051\000\051\000\000\000\000\000\090\000\091\000\092\000\
\093\000\000\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\142\000\000\000\101\000\102\000\
\000\000\000\000\090\000\091\000\092\000\093\000\000\000\000\000\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\144\000\000\000\101\000\102\000\000\000\000\000\090\000\
\091\000\092\000\093\000\000\000\000\000\000\000\000\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\000\000\000\000\
\101\000\102\000\147\000\090\000\091\000\092\000\093\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\000\000\000\000\101\000\102\000\090\000\091\000\
\092\000\093\000\000\000\000\000\000\000\000\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\000\000\000\000\101\000\
\102\000\090\000\091\000\092\000\093\000\000\000\000\000\000\000\
\000\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\000\000\000\000\101\000\090\000\091\000\092\000\093\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000"

let yycheck = "\050\000\
\000\000\031\001\053\000\054\000\086\000\087\000\011\001\012\001\
\059\000\002\001\001\001\002\001\017\001\003\001\007\001\001\001\
\006\001\003\001\048\001\001\000\013\001\031\001\015\001\016\001\
\075\000\005\001\006\001\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\028\001\029\001\030\001\048\001\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\001\001\002\001\031\001\
\001\001\031\001\003\001\031\001\005\001\006\001\010\001\008\001\
\005\001\006\001\014\001\149\000\142\000\151\000\144\000\048\001\
\003\001\018\001\019\001\006\001\024\001\025\001\005\001\006\001\
\004\001\026\001\027\001\031\001\032\001\004\001\002\001\161\000\
\004\001\005\001\141\000\165\000\143\000\004\001\010\001\146\000\
\005\001\148\000\014\001\150\000\048\001\049\001\050\001\051\001\
\009\001\010\001\011\001\012\001\024\001\025\001\005\001\162\000\
\017\001\006\001\048\001\031\001\032\001\033\001\034\001\003\001\
\036\001\037\001\001\001\006\001\003\001\005\001\005\001\006\001\
\002\001\008\001\004\001\005\001\048\001\049\001\050\001\051\001\
\010\001\004\001\048\001\001\001\014\001\003\001\048\001\005\001\
\006\001\001\001\008\001\026\001\027\001\004\001\024\001\025\001\
\002\001\002\001\002\001\013\001\001\001\031\001\032\001\033\001\
\034\001\003\001\036\001\037\001\035\001\027\001\006\001\023\000\
\024\000\025\000\002\001\027\000\004\001\005\001\048\001\049\001\
\050\001\051\001\010\001\013\001\036\000\003\001\014\001\039\000\
\013\001\013\001\013\001\031\001\044\000\044\000\003\001\003\001\
\024\001\025\001\001\001\009\001\010\001\011\001\012\001\031\001\
\032\001\033\001\034\001\017\001\036\001\037\001\020\001\021\001\
\022\001\023\001\003\001\003\001\002\001\051\000\004\001\005\001\
\048\001\049\001\050\001\051\001\010\001\001\001\003\001\003\001\
\014\001\005\001\006\001\162\000\008\001\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\255\255\255\255\001\001\255\255\003\001\255\255\005\001\006\001\
\255\255\008\001\048\001\049\001\050\001\051\001\002\001\255\255\
\255\255\005\001\255\255\018\001\019\001\255\255\010\001\255\255\
\255\255\255\255\014\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\002\001\255\255\004\001\255\255\048\001\049\001\050\001\051\001\
\010\001\001\001\255\255\003\001\014\001\005\001\006\001\255\255\
\008\001\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\255\255\255\255\002\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\010\001\001\001\255\255\003\001\
\014\001\005\001\006\001\255\255\008\001\255\255\048\001\049\001\
\050\001\051\001\024\001\025\001\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\048\001\049\001\050\001\051\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\001\001\255\255\003\001\255\255\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\001\001\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\001\001\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\001\001\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\001\001\
\255\255\003\001\255\255\005\001\006\001\001\001\008\001\003\001\
\255\255\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\001\001\255\255\003\001\255\255\005\001\006\001\
\001\001\008\001\003\001\255\255\005\001\006\001\255\255\008\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\001\001\255\255\003\001\
\255\255\005\001\006\001\001\001\008\001\003\001\255\255\005\001\
\006\001\255\255\008\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\001\001\255\255\003\001\255\255\005\001\006\001\255\255\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\003\001\
\255\255\026\001\027\001\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\003\001\255\255\026\001\027\001\
\255\255\255\255\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\003\001\255\255\026\001\027\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LEFTSQUAREBRACKET\000\
  RIGHTSQUAREBRACKET\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  ADDASSIGN\000\
  MINUSASSIGN\000\
  MOD\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  SINGLELINK\000\
  DOUBLELINK\000\
  ADDADD\000\
  AT\000\
  NULL\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  NODE\000\
  FLOAT\000\
  STRING\000\
  LIST\000\
  SET\000\
  MAP\000\
  GRAPH\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "parser.mly"
            ( _1 )
# 492 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( [], [] )
# 498 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 506 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 43 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 514 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 529 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                  ( [] )
# 535 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 55 "parser.mly"
                  ( List.rev _1 )
# 542 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                             ( [(_1,_2)] )
# 550 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "parser.mly"
                             ( (_3,_4) :: _1 )
# 559 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
        ( Int )
# 565 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Bool )
# 571 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
         ( Void )
# 577 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
         ( Node )
# 583 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
          ( Float )
# 589 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
           ( String )
# 595 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
          ( Graph )
# 601 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 69 "parser.mly"
                              ( List(_4) )
# 608 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 70 "parser.mly"
                             ( Set(_4) )
# 615 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 71 "parser.mly"
                                       ( Map(_4, _6) )
# 623 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                     ( [] )
# 629 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 76 "parser.mly"
                     ( _2 :: _1 )
# 637 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 79 "parser.mly"
                ( (_1, _2) )
# 645 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
                   ( [] )
# 651 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 83 "parser.mly"
                   ( _2 :: _1 )
# 659 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
              ( Expr _1 )
# 666 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                ( Return Noexpr )
# 672 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                     ( Return _2 )
# 679 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 89 "parser.mly"
                            ( Block(List.rev _2) )
# 686 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 694 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                            ( If(_3, _5, _7) )
# 703 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 713 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                                  ( While(_3, _5) )
# 721 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( Noexpr )
# 727 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                  ( _1 )
# 734 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "parser.mly"
                     ( Literal(_1) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 102 "parser.mly"
                     ( FloatLit(_1) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                     ( StringLit(_1) )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                     ( BoolLit(true) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                     ( BoolLit(false) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                     ( Null )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                     ( Id(_1) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 868 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Mod,   _3) )
# 884 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 121 "parser.mly"
              ( AddAdd(_1) )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                         ( Unop(Neg, _2) )
# 898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Unop(Not, _2) )
# 905 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                      ( AddAssign(_1, _3) )
# 913 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                        ( MinusAssign(_1, _3) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Assign(_1, _3) )
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subscript) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                          ( SubscriptAssign(_1, _3) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                                 ( SingleLinkAssign(_1, _3, _5) )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                                 ( DoubleLinkAssign(_1, _3, _5) )
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 130 "parser.mly"
                                 ( Call(_1, _3) )
# 963 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                       ( _2 )
# 970 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lists) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lists) in
    Obj.repr(
# 132 "parser.mly"
                                     ( BatchSingleLinkAssign(_1, _3, _5) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'lists) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lists) in
    Obj.repr(
# 133 "parser.mly"
                                     ( BatchDoubleLinkAssign(_1, _3, _5) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lists) in
    Obj.repr(
# 134 "parser.mly"
          ( _1 )
# 995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'subscript) in
    Obj.repr(
# 135 "parser.mly"
              ( _1 )
# 1002 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                                                ( Subscript(_1, _3) )
# 1010 "parser.ml"
               : 'subscript))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_literals) in
    Obj.repr(
# 141 "parser.mly"
                            ( ListLiteral(_3) )
# 1017 "parser.ml"
               : 'lists))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
           ( [] )
# 1023 "parser.ml"
               : 'list_literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'listElements) in
    Obj.repr(
# 146 "parser.mly"
                       ( List.rev _1 )
# 1030 "parser.ml"
               : 'list_literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
            ( [_1] )
# 1037 "parser.ml"
               : 'listElements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'listElements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                             ( _3 :: _1 )
# 1045 "parser.ml"
               : 'listElements))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                  ( [] )
# 1051 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 156 "parser.mly"
                  ( List.rev _1 )
# 1058 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                            ( [_1] )
# 1065 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                            ( _3 :: _1 )
# 1073 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
